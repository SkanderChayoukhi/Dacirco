
syntax = "proto3";
option objc_class_prefix = "DCC";
package dacirco_grpc_service;

/**
* The gRPC interface of the DaCirco controller
*/
service DaCircogRPCService{
  /// The REST frontend calls this method when it receives a new request.
  rpc submit_request (GrpcTCRequest) returns (GrpcTCRequestReply)  {}
  /// The REST frontend calls this method to answer a GET /jobs request.
  rpc get_requests (GrpcEmpty) returns (GrpcRequestIDList) {}
  /// The REST frontend calls this method to answer a GET /jobs/job_id request.
  rpc get_request (GrpcRequestID) returns (GrpcTCRequest) {}
  /// The REST frontend calls this method to answer a GET /jobs/job_id/state request.
  rpc get_request_status (GrpcRequestID) returns (GrpcTCRequestStatus) {}
  /// The REST frontend calls this method to answer a GET /workers request.
  rpc get_workers (GrpcEmpty) returns (GrpcWorkerIDList) {}
  /// The REST frontend calls this method to answer a GET /workers/worker_id request.
  rpc get_worker (GrpcWorkerID) returns (GrpcWorkerFullDesc) {}
  /// The REST frontend calls this method to answer a GET /workers/worker_id/state request.
  rpc get_worker_status (GrpcWorkerID) returns (GrpcWorkerState) {}
  /// Each transcoding worker calls this method whenever it *first* starts
  //(i.e., one call only from each worker).
  rpc register_worker (GrpcWorkerDesc) returns (GrpcServiceReply) {}
  /// Transcoding workers call this method to get their tasks.
  rpc get_tasks (GrpcWorkerDesc) returns (stream GrpcTCTask) {} 
  /// Transcoding workers call this method to inform the controller about a (non-error) event.
  rpc submit_event (GrpcEvent) returns (GrpcServiceReply) {}
  /// Transcoding workers call this method to inform the controller about a (non-error) event.
  rpc submit_error (GrpcErrorEvent) returns (GrpcServiceReply) {}
}

/// Message sent by the REST frontend and by the controller.  It contains all the parameters of the
/// request.
message GrpcTCRequest {
  string input_video = 1; /// The name of the input video.
  string output_video = 2; /// The name of the output video.
  int32  bitrate = 3;  /// The desired bitrate in bit per second.
  string speed = 4;  /// How fast/slow should the encoding process be.
}

/// Response for the submit_request method (sent from the controller to the REST API)
message GrpcTCRequestReply {
  bool success = 1;  /// True means no error, false means error.
  string error_message = 2;  /// If success is false, this field contains the error message.
  string request_id = 3; /// The UUID for this request.
}

/// Message sent by the REST frontend.  It contains only the request ID
message GrpcRequestID {
  string request_id = 1;
}

/// Response for the get_requests method (sent from the controller to the REST API)
message GrpcRequestIDList {
  repeated string request_ids = 1; /// The list of the request IDs.
}

/// Response for the get_request_status method (sent from the controller to the REST API)
message GrpcTCRequestStatus {
  enum RequestStatusEnum {
    INVALID = 0; /// O is the default value, this way we are sure that we are not going to send a message with the wrong type.
    WAITING = 1; /// The request is waiting for a worker to process it.
    STARTED = 3; /// A worker has started transcoding the video.
    COMPLETED = 4; /// The worker has successfully uploaded the output file.
    ERROR = 5;  /// There was an error when processing the request.
    NOT_FOUND = 6; /// The requested ID given by the user is unknown.
  }
  RequestStatusEnum request_status = 1;  /// The type of the event
}

/// Message sent by the REST frontend.  It contains only the worker ID
message GrpcWorkerID {
  string worker_id = 1;
}

/// Response for the get_workers method (sent from the controller to the REST API)
message GrpcWorkerIDList {
  repeated string worker_ids = 1; /// The list of the worker IDs.
}

/// Response for the get_worker method (sent from the controller to the REST API)
message GrpcWorkerFullDesc {
  string name = 1; /// The name of the worker.
  string id = 2; /// The id of the worker.
  string cpus = 3;  /// The number of vcpus of the worker.
  string memory = 4;  /// The memory of the worker.
  string node = 5; /// The node running the worker.
}

/// Response for the get_request_status method (sent from the controller to the REST API)
message GrpcWorkerState {
  enum WorkerStatusEnum {
    INVALID = 0; /// O is the default value, this way we are sure that we are not going to send a message with the wrong type.
    BOOTING = 1;  /// The worker is booting.
    BUSY = 2; /// The worker is busy.
    IDLE = 3;  /// The worker is idle.
    STOPPED = 4; /// The worker has been deleted.
    NOT_FOUND = 5; /// The worker ID given by the user is unknown.
  }
  WorkerStatusEnum worker_status = 1;  /// The type of the event
}

/// Reply message from the server to the client and to the workers.  Indicates
/// whether the request succeeded or not.  In case of failure, it contains an
/// error message.
message GrpcServiceReply {
  bool success = 1;  /// True means no error, false means error.
  string error_message = 2;  /// If success is false, this field contains the error message.
}

/// It uniquely identifies a transcoding worker.  Sent in calls from the workers
/// to the server so that the server can tell which worker is the sender of the
/// message.
message GrpcWorkerDesc {
  /// The name of the worker (it should be unique but it is not strictly needed).
  string name = 1;
  /// The UUID of the worker (MUST BE UNIQUE)
  string id = 2;  
}

/// Sent from the server to the workers.  It identifies a single transcoding
/// task.
message GrpcTCTask {
  string input_video = 1;  /// The name of the input video.
  string output_video = 2;  /// The name of the output video.
  int32  bitrate = 3;  /// The desired bitrate.
  string speed = 4;  /// How fast the transcoding process should be.
  string request_id = 5; /// The UUID of the request.
  string worker_id = 6;  /// The UUID of the worker to which this task has been assigned.
  string task_id = 7;  /// The unique identifier of this task.
}


/// Sent from a worker to the server.  It contains the worker and task id so that the 
/// server knows which worker and which task have generated this event
message GrpcEvent{
  enum GrpcEventTypeEnum {
    INVALID = 0; /// O is the default value, this way we are sure that we are not going to send a message with the wrong type.
    FILE_DOWNLOADED = 1; /// The worker has successfully downloaded the input file.
    TRANSCODING_COMPLETED = 3; /// The worker has successfully transcoded the video.
    FILE_UPLOADED = 4; /// The worker has successfully uploaded the output file.
    KEEPALIVE = 5;  /// The worker is still alive.
  }
  GrpcEventTypeEnum event_type = 1;  /// The type of the event
  string worker_id = 2;  /// The UUID of the worker.
  string task_id = 3;  /// The UUID of the task.
}

/// Sent from a worker to the server. It contains the worker and task id so that the 
/// server knows which worker and which task have generated this event
message GrpcErrorEvent{
  enum GrpcErrorType {
    INVALID = 0; /// O is the default value, this way we are sure that we are not going to send a message with the wrong type.
    TRANSCODING_FAILED = 1; /// ffmpeg returned an error. 
    STORAGE_ERROR = 2; /// The storage system returned an error.
  }
  GrpcErrorType error_type = 1;  // The type of the error.
  string error_message = 2; /// The error message.
  string worker_id = 3;  /// The UUID of the worker.
  string task_id = 4;  /// The UUID of the task.
}

/// GrpcEmpty message (used when there are no arguments or nothing is returned)
message GrpcEmpty{}